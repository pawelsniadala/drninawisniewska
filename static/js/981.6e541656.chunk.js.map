{"version":3,"file":"static/js/981.6e541656.chunk.js","mappings":"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","sources":["js/util/util.js","js/util/dom-events.js","js/util/viewport-size.js","js/slide/pan-bounds.js","js/slide/zoom-level.js","js/slide/slide.js","js/gestures/drag-handler.js","js/gestures/zoom-handler.js","js/gestures/tap-handler.js","js/gestures/gestures.js","js/main-scroll.js","js/keyboard.js","js/util/css-animation.js","js/util/spring-easer.js","js/util/spring-animation.js","js/util/animations.js","js/scroll-wheel.js","js/ui/ui-element.js","js/ui/button-arrow.js","js/ui/button-close.js","js/ui/button-zoom.js","js/ui/loading-indicator.js","js/ui/counter-indicator.js","js/ui/ui.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/slide/loader.js","js/core/base.js","js/opener.js","js/photoswipe.js","js/slide/get-thumb-bounds.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  /* @ts-ignore */\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import { clamp } from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {Record<Axis, number>} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n    this.currZoomLevel = 1;\r\n    this.center = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.max = /** @type {Point} */ { x: 0, y: 0 };\r\n    this.min = /** @type {Point} */ { x: 0, y: 0 };\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By default, it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement} [element] thumbnail element\r\n * @prop {string} [src] image URL\r\n * @prop {string} [srcset] image srcset\r\n * @prop {number} [w] image width (deprecated)\r\n * @prop {number} [h] image height (deprecated)\r\n * @prop {number} [width] image width\r\n * @prop {number} [height] image height\r\n * @prop {string} [msrc] placeholder image URL that's displayed before large image is loaded\r\n * @prop {string} [alt] image alt text\r\n * @prop {boolean} [thumbCropped] whether thumbnail is cropped client-side or not\r\n * @prop {string} [html] html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.pan = { x: 0, y: 0 };\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap', 'div');\r\n    /** @type {HTMLElement | null} */\r\n    this.holderElement = null;\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n    this.heavyAppended = false;\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load(false);\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\r\n  getPlaceholderElement() {\r\n    return this.content.placeholder?.element;\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    if (!prevZoomLevel) {\r\n      prevZoomLevel = this.zoomLevels.initial;\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\r\n  isPannable() {\r\n    return Boolean(this.width) && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\r\n  isZoomable() {\r\n    return Boolean(this.width) && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  /** @returns {string} */\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = { x: 0, y: 0 };\r\n  }\r\n\r\n  start() {\r\n    if (this.pswp.currSlide) {\r\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    }\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && this.pswp.options.closeOnVerticalDrag\r\n        && (currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit)\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!this.pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        this.pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        if (currSlide) {\r\n          roundPoint(currSlide.pan);\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { velocity } = this.gestures;\r\n    const { mainScroll, currSlide } = this.pswp;\r\n    let indexDiff = 0;\r\n\r\n    this.pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is visible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / this.pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched,\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if ((currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max)\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { velocity } = this.gestures;\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (this.pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Increasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        this.pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = this.pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    this.pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          this.pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = this.pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta || !currSlide) {\r\n      return false;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (this.pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - (this.pswp.currSlide?.bounds.center.y ?? 0)) / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { currSlide } = this.pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const { pan, bounds } = currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startPan = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._startZoomPoint = { x: 0, y: 0 };\r\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\r\n    this._zoomPoint = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._wasOverFitZoomLevel = false;\r\n    /** @private */\r\n    this._startZoomLevel = 1;\r\n  }\r\n\r\n  start() {\r\n    const { currSlide } = this.gestures.pswp;\r\n    if (currSlide) {\r\n      this._startZoomLevel = currSlide.currZoomLevel;\r\n      equalizePoints(this._startPan, currSlide.pan);\r\n    }\r\n\r\n    this.gestures.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial)\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide?.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === 0) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({ x: 0, y: 0 }, currSlide.pan);\r\n    let destinationPan = equalizePoints({ x: 0, y: 0 }, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T, P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide?.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide?.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element?.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y' | null} */\r\n    this.dragAxis = null;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = { x: 0, y: 0 }; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = { x: 0, y: 0 }; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.prevP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP1 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.startP2 = { x: 0, y: 0 };\r\n    /** @type {Point} */\r\n    this.velocity = { x: 0, y: 0 };\r\n\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._lastStartP1 = { x: 0, y: 0 };\r\n    /** @type {Point}\r\n     * @private\r\n     */\r\n    this._intervalP1 = { x: 0, y: 0 };\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]}\r\n     * @private\r\n     */\r\n    this._ongoingPointers = [];\r\n    /** @private */\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    /** @private */\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n    /** @private */\r\n    this._numActivePoints = 0;\r\n    /** @private */\r\n    this._intervalTime = 0;\r\n    /** @private */\r\n    this._velocityCalculated = false;\r\n    this.isMultitouch = false;\r\n    this.isDragging = false;\r\n    this.isZooming = false;\r\n    /** @type {number | null} */\r\n    this.raf = null;\r\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\r\n    this._tapTimer = null;\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(\r\n        pswp.scrollWrap,\r\n        'click',\r\n        /** @type EventListener */(this._onClick.bind(this))\r\n      );\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        if (pswp.scrollWrap) {\r\n          pswp.scrollWrap.ontouchmove = () => {};\r\n          pswp.scrollWrap.ontouchend = () => {};\r\n        }\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(\r\n      pswp.scrollWrap,\r\n      pref + down,\r\n      /** @type EventListener */(this.onPointerDown.bind(this))\r\n    );\r\n    events.add(window, pref + 'move', /** @type EventListener */(this.onPointerMove.bind(this)));\r\n    events.add(window, pref + up, /** @type EventListener */(this.onPointerUp.bind(this)));\r\n    if (cancelEvent) {\r\n      events.add(\r\n        pswp.scrollWrap,\r\n        cancelEvent,\r\n        /** @type EventListener */(this.onPointerUp.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse';\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPointer) => {\r\n        return ongoingPointer.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, { x: 0, y: 0 }));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  /** update points at the start of gesture\r\n   * @private\r\n   */\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  /** @private */\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n    this.slideWidth = 0;\r\n    /** @private */\r\n    this._currPositionIndex = 0;\r\n    /** @private */\r\n    this._prevPositionIndex = 0;\r\n    /** @private */\r\n    this._containerShiftIndex = -1;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = [];\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', 'div', this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    return Boolean(diff);\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    /** @type {ItemHolder | undefined} */\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        if (tempHolder) {\r\n          this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n          this._containerShiftIndex++;\r\n\r\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n        }\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        if (tempHolder) {\r\n          this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n          this._containerShiftIndex--;\r\n\r\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n          pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1]?.slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\r\n  moveTo(x, dragging) {\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      let newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      const delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n\r\n    if (this.pswp.container) {\r\n      setTransform(this.pswp.container, x);\r\n    }\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging: dragging ?? false });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\nconst KeyboardKeyCodesMap = {\r\n  Escape: 27,\r\n  z: 90,\r\n  ArrowLeft: 37,\r\n  ArrowUp: 38,\r\n  ArrowRight: 39,\r\n  ArrowDown: 40,\r\n  Tab: 9,\r\n};\r\n\r\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\r\nconst getKeyboardEventKey = (key, isKeySupported) => {\r\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\r\n};\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    /** @private */\r\n    this._wasFocused = false;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', /** @type EventListener */(this._onFocusIn.bind(this)));\r\n      pswp.events.add(document, 'keydown', /** @type EventListener */(this._onKeyDown.bind(this)));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @private */\r\n  _focusRoot() {\r\n    if (!this._wasFocused && this.pswp.element) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe> | undefined} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y' | undefined} */\r\n    let axis;\r\n    let isForward = false;\r\n    const isKeySupported = 'key' in e;\r\n\r\n    switch (isKeySupported ? e.key : e.keyCode) {\r\n      case getKeyboardEventKey('Escape', isKeySupported):\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case getKeyboardEventKey('z', isKeySupported):\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\r\n        axis = 'x';\r\n        break;\r\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case getKeyboardEventKey('Tab', isKeySupported):\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      // @ts-ignore\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (template\r\n        && document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish = () => {},\r\n      duration = 333,\r\n      easing = DEFAULT_EASING,\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop] ?? '';\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n    /** @private */\r\n    this._finished = false;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transition won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element property was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    this._dampedFrequency = this._naturalFrequency;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\r\n\r\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\r\n\r\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    this._raf = 0;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish = () => {},\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = 0;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\r\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\r\n\r\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\r\n  _start(props, isSpring) {\r\n    const animation = isSpring\r\n      ? new SpringAnimation(/** @type SpringAnimationProps */ (props))\r\n      : new CSSAnimation(/** @type CssAnimationProps */ (props));\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', /** @type EventListener */(this._onWheel.bind(this)));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    /** @type {HTMLElement} */\r\n    const element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      const ariaText = ariaLabel || title;\r\n      if (ariaText) {\r\n        element.setAttribute('aria-label', ariaText);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          // @ts-ignore\r\n          pswp[data.onClick]();\r\n        } else if (typeof data.onClick === 'function') {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    /** @type {HTMLElement | undefined} root element by default */\r\n    let container = pswp.element;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      }\r\n    }\r\n\r\n    container?.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean | undefined} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout | null} */\r\n    let delayTimeout = null;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide?.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(Boolean(pswp.currSlide?.content.isLoading()));\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    if (pswp.ui) {\r\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n    }\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [];\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = () => {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element?.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n\r\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\r\n      return;\r\n    }\r\n\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this.isOpen = false;\r\n    this.isClosing = false;\r\n    this.isOpening = false;\r\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\r\n    this._duration = undefined;\r\n    /** @private */\r\n    this._useAnimation = false;\r\n    /** @private */\r\n    this._croppedZoom = false;\r\n    /** @private */\r\n    this._animateRootOpacity = false;\r\n    /** @private */\r\n    this._animateBgOpacity = false;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\r\n    this._placeholder = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._opacityElement = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\r\n    this._cropContainer1 = undefined;\r\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\r\n    this._cropContainer2 = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\r\n    this._thumbBounds = undefined;\r\n\r\n\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n  }\r\n\r\n  /** @private */\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = undefined;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = undefined;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide?.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && slide?.content.usePlaceholder()\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening && slide) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity ?? false;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide?.holderElement;\r\n\r\n      if (pswp.container) {\r\n        pswp.container.style.overflow = 'hidden';\r\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n      }\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity && pswp.bg) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        if (pswp.element) {\r\n          pswp.element.style.opacity = '1';\r\n        }\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      if (pswp.mainScroll.itemHolders[0]) {\r\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      }\r\n      if (pswp.mainScroll.itemHolders[2]) {\r\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n      }\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve(true);\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve(true);\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _initiate() {\r\n    this.pswp.element?.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element?.classList.toggle('pswp--ui-visible', this.isOpening);\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom && pswp.container) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide?.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      if (pswp.currSlide) {\r\n        pswp.currSlide.zoomAndPanToInitial();\r\n        this._animateTo(\r\n          pswp.currSlide.container,\r\n          'transform',\r\n          pswp.currSlide.getCurrentTransform()\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._animateBgOpacity && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  /** @private */\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    // do not animate opacity if it's already at 0\r\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity && pswp.element) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    if (currSlide) {\r\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n      if (animate) {\r\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n      } else {\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\r\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PreparedPhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.options = this._prepareOptions(options || {});\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\r\n    this.viewportSize = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     */\r\n    this.bgOpacity = 1;\r\n    this.currIndex = 0;\r\n    this.potentialIndex = 0;\r\n    this.isOpen = false;\r\n    this.isDestroying = false;\r\n    this.hasMouse = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\r\n    this._initialItemData = {};\r\n    /** @type {Bounds | undefined} */\r\n    this._initialThumbBounds = undefined;\r\n\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.topBar = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.template = undefined;\r\n    /** @type {HTMLDivElement | undefined} */\r\n    this.container = undefined;\r\n    /** @type {HTMLElement | undefined} */\r\n    this.scrollWrap = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.currSlide = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n    this.animations = new Animations();\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return false;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    if (this.element) {\r\n      this.element.className += ' ' + rootClasses;\r\n    }\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      const { itemHolders } = this.mainScroll;\r\n\r\n      // Add content to the previous and next slide\r\n      if (itemHolders[0]) {\r\n        itemHolders[0].el.style.display = 'block';\r\n        this.setContent(itemHolders[0], this.currIndex - 1);\r\n      }\r\n      if (itemHolders[2]) {\r\n        itemHolders[2].el.style.display = 'block';\r\n        this.setContent(itemHolders[2], this.currIndex + 1);\r\n      }\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    if (this.mainScroll.itemHolders[1]) {\r\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    }\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    return clamp(index, 0, numSlides - 1);\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.appendHeavy();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide?.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide?.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this._listeners = {};\r\n\r\n    if (this.scrollWrap) {\r\n      this.scrollWrap.ontouchmove = null;\r\n      this.scrollWrap.ontouchend = null;\r\n    }\r\n\r\n    this.element?.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      itemHolder.slide?.destroy();\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = (this.currSlide?.index ?? 0) - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide?.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = undefined;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  /** @returns {Point} */\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    if (this.bg) {\r\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element?.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp', 'div');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', 'div', this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', 'div', this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PreparedPhotoSwipeOptions} */\r\n    return {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  /** @type {Bounds | undefined} */\r\n  let thumbBounds;\r\n  /** @type {HTMLElement | null | undefined} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : /** @type {HTMLElement | null} */ (element.querySelector(thumbSelector));\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w || 0,\r\n        itemData.height || itemData.h || 0\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","LOAD_STATE","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","e","DOMEvents","this","_pool","target","type","listener","passive","_toggleListener","forEach","poolItem","unbind","skipPool","methodName","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","_updateAxis","dispatch","reset","axis","elSize","data","panAreaSize","panOffset","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","_parseZoomLevelOption","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","activate","deactivate","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","defaultPrevented","append","hasSlide","remove","update","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","placeholder","element","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","zoomTo","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","correctPan","panX","panY","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","stopAll","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","start","end","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","isPannable","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","actionName","actionFullName","toggleZoom","clickToCloseNonZoomable","toggle","call","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","add","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","change","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","doubleTap","setTimeout","tap","click","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resize","i","setAttribute","display","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","resetPosition","setIsActive","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","easeFrame","Animations","activeAnimations","_start","isSpring","animation","stop","destroy","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","sort","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","fn","priority","f1","f2","addFilter","removeFilter","args","apply","off","Placeholder","imageSrc","imgEl","decoding","alt","src","parentNode","Content","instance","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","removePlaceholder","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","errorMsg","supportsDecode","decode","catch","finally","appendImage","lazyLoadData","zoomLevel","createContentFromData","lazyLoad","ceil","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","getItemData","lazyLoadSlide","addToCache","setSlide","removeByIndex","indexToRemove","item","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","Array","isArray","Element","_domElementToItemData","galleryElement","children","childSelector","option","legacySelector","parent","elements","NodeList","from","selector","querySelectorAll","getElementsFromOption","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","getPlaceholderElement","_animateZoom","bg","opacity","innerRect","overflow","_setClosedStateZoomPan","willChange","Promise","resolve","img","decoded","isDelaying","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","open","goTo","removeAll","slideIndex","potentialHolderIndex","holder","matchMedia","matches","test","userAgent","setScrollOffset","appendHolders","init","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement"],"sourceRoot":""}